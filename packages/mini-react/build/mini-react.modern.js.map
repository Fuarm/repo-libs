{"version":3,"file":"mini-react.modern.js","sources":["../src/render.js","../src/index.js","../src/createElement.js"],"sourcesContent":["/**\n * 全局变量\n */\n// 下一个工作单元\nlet nextUnitOfWork = null;\n// react 双缓存 跟踪当前渲染的节点\n// hooks 数据结构 栈\nlet wipFiber = null;\n// 当前的工作单元\nlet wipRoot = null;\n// 当前渲染树 最后准备提交的渲染树\nlet currentRoot = null;\n// 准备删除的节点树\nlet deletions = null;\n\nfunction createDom(fiber) {\n  const dom = fiber.type === 'TEXT_ELEMENT'\n    ? document.createTextNode('')\n    : document.createElement(fiber.type)\n  updateDom(dom, {}, fiber.props)\n  return dom\n}\n\nconst isProperty = key => key !== 'children';\n\n//判断是否是新属性\nconst isNew = (prev, next) => key => prev[key] !== next[key];\n// 是否是旧属性\nconst isGone = (prev, next) => key => !(key in next)\n\nconst isEvent = key => key.startsWith('on')\n\nfunction updateDom(dom, prevProps, nextProps) {\n  // 删除旧属性\n  Object.keys(prevProps)\n    .filter(isProperty)\n    .filter(isGone(prevProps, nextProps))\n    .forEach(name => dom[name] = '')\n  // 更新新属性\n  Object.keys(nextProps)\n    .filter(isProperty)\n    .filter(isNew(prevProps, nextProps))\n    .forEach(name => dom[name] = nextProps[name])\n  // 删除旧的或者有变化的事件\n  Object.keys(prevProps)\n    .filter(isEvent)\n    .filter(key => !(key in nextProps) || isNew(prevProps, nextProps)(key))\n    .forEach(name => {\n      const eventType = name.toLowerCase().substring(2)\n      dom.removeEventListener(eventType, prevProps[name])\n    })\n  // 注册新事件\n  Object.keys(nextProps)\n    .filter(isEvent)\n    .filter(isNew(prevProps, nextProps))\n    .forEach(name => {\n      const eventType = name.toLowerCase().substring(2)\n      dom.addEventListener(eventType, nextProps[name])\n    })\n}\n\n/**\n * 删除Dom\n * 无论删除还是挂载都需要找到Dom\n * @param fiber\n * @param domParent\n */\nfunction commitDeletion(fiber, domParent) {\n  if (fiber.dom) {\n    domParent.removeChild(fiber.dom);\n  } else {\n    commitDeletion(fiber.child, domParent);\n  }\n}\n\nfunction commitRoot() {\n  deletions.forEach(commitWork)\n  commitWork(wipRoot.child)\n  // 双缓存对应的渲染树\n  currentRoot = wipRoot\n  wipRoot = null\n}\n\n/**\n * 提交工作单元\n * @param fiber\n */\nfunction commitWork(fiber) {\n  if (!fiber) {\n    return\n  }\n  // 更新 dom\n  let domParentFiber = fiber.parent\n  // 如果fiber.parent 没有 dom节点，一直向上parent查找，直到找到 dom 节点\n  while (!domParentFiber.dom) {\n    domParentFiber = domParentFiber.parent\n  }\n  const domParent = domParentFiber.dom\n  if (fiber.effectTag === 'PLACEMENT' && fiber.dom !== null) {\n    domParent.appendChild(fiber.dom)\n  } else if (fiber.effectTag === 'UPDATE' && fiber.dom !== null) {\n    updateDom(fiber.dom, fiber.alternate.props, fiber.props)\n  } else if (fiber.effectTag === 'DELETION') {\n    commitDeletion(fiber, domParent)\n  }\n  commitWork(fiber.child)\n  commitWork(fiber.sibling)\n}\n\n/**\n * 渲染 render\n * @param element\n * @param container\n */\nfunction render(element, container) {\n  // 递归： render diff koa-compose async/await\n  // 1、蹦床函数 一定不爆栈 EC 拉平 while\n  // 2、尾调用优化\n  // 3、while 循环优化 V8 10000 for O(n)\n  // 4、遍历树 while 深度优先 广度优先\n  // const dom = element.type == 'TEXT_ELEMENT'\n  //   ? document.createTextNode('')\n  //   : document.createElement(element.type);\n  // const isProperty = key => key !== 'children';\n  // Object.keys(element.props)\n  //   .filter(isProperty)\n  //   .forEach((name) => {\n  //     dom[name] = element.props[name];\n  //   });\n  // element.props.children.forEach(child => render(child, dom));\n  // container.appendChild(dom);\n\n\n  // 阶段二\n  // 第一个工作单元\n  wipRoot = {\n    dom: container,\n    props: {\n      children: [element],\n    },\n    // 判断链表中正在工作的，切换\n    alternate: currentRoot,\n  }\n  deletions = []\n  // 下一个fiber 节点（工作单元）的跟节点\n  nextUnitOfWork = wipRoot\n}\n\nfunction workLoop(deadline) {\n  // 1、获取任务\n  // 2、执行任务\n  // 3、将任务放入队列\n  // 4、循环\n  // 5、循环结束\n  // 6、执行完成\n  // 判断是否应该停止循环\n  let shouldYield = false;\n  while (nextUnitOfWork && !shouldYield) {\n    nextUnitOfWork = performUnitOfWork(nextUnitOfWork)\n    // 如果当前任务的截止时间到了 停止工作循环 执行更高优先级的任务\n    console.log(\"deadline🚗\", deadline.timeRemaining())\n    console.log(\"🌲\", nextUnitOfWork)\n    shouldYield = deadline.timeRemaining() < 1;\n  }\n\n  if (!nextUnitOfWork && wipRoot) {\n    // 提交阶段\n    commitRoot();\n  }\n\n  requestIdleCallback(workLoop)\n}\n// 告知浏览器调度\nrequestIdleCallback(workLoop)\n\n/**\n * 更新函数组件\n * @param fiber\n */\nfunction updateFunctionComponent(fiber) {\n  wipFiber = fiber\n  const children = [fiber.type(fiber.props)]\n  wipFiber.hooks = []\n  reconcileChildren(fiber, children)\n}\n\n/**\n * 更新普通节点\n * @param fiber\n */\nfunction updateHostComponent(fiber) {\n  // 第一回 渲染到页面中去\n  if (!fiber.dom) {\n    fiber.dom = createDom(fiber)\n  }\n  // dom tree\n  const children = fiber.props.children\n  // 调和 dom diff tree\n  reconcileChildren(fiber, children)\n}\n\n/**\n * 承载下一个工作单元\n */\nfunction performUnitOfWork(fiber) {\n  // 判断当前节点是不是函数组件\n  const isFunctionComponent = fiber && fiber.type && fiber.type instanceof  Function\n\n  if (isFunctionComponent) {\n    updateFunctionComponent(fiber)\n  } else {\n    updateHostComponent(fiber)\n  }\n\n  if (fiber.child) {\n    return fiber.child\n  }\n  let nextFiber = fiber\n  while (nextFiber) {\n    if (nextFiber.sibling) {\n      return nextFiber.sibling\n    }\n    nextFiber = nextFiber.parent\n  }\n}\n\n/**\n * dom diff\n * 构建成双向链表\n * @param fiber\n * @param elements\n */\nfunction reconcileChildren(fiber, elements) {\n  let index = 0\n  // 变化之前的节点\n  let oldFiber = fiber.alternate && fiber.alternate.child\n  let prevSibling = null\n  // 遍历 children\n  while (index < elements.length || oldFiber != null) {\n    // jsx --> fiber\n    const element = elements[index]\n    let newFiber = null;\n    const sameType = oldFiber && element && element.type === oldFiber.type\n    // 如果是同样的节点类型\n    if (sameType) {\n      newFiber = {\n        type: oldFiber.type,\n        props: element.props,\n        dom: oldFiber.dom,\n        parent: fiber,\n        alternate: oldFiber,\n        effectTag: 'UPDATE'\n      }\n    }\n    // 如果节点类型不一致 新增节点\n    if (!sameType && element) {\n      newFiber = {\n        type: element.type,\n        props: element.props,\n        dom: null,\n        parent: fiber,\n        alternate: null,\n        effectTag: 'PLACEMENT'\n      }\n    }\n    // 如果节点类型不一致 新节点不存在\n    if (!sameType && oldFiber) {\n      oldFiber.effectTag = 'DELETION'\n      deletions.push(oldFiber)\n    }\n    // 如果存在 old 节点\n    if (oldFiber) {\n      oldFiber = oldFiber.sibling\n    }\n    if (index === 0) {\n      fiber.child = newFiber\n    } else if (element) {\n      // TODO: fiber sibling 怎么创建注入的\n      prevSibling.sibling = newFiber\n    }\n    // js 模拟指针移动?\n    prevSibling = newFiber\n    index++\n  }\n}\n\n/**\n * hook: useState\n * initial 初始参数\n * @param initial\n * @returns {(*|setState)[]}\n */\nfunction useState(initial) {\n  // 是否有旧的钩子， 旧钩子存储了上一次更新的 hook\n  const oldHook = wipFiber.alternate && wipFiber.alternate.hook\n  // 初始化钩子 钩子的状态是旧的钩子的状态或者初始状态\n  const hook = {\n    state: oldHook ? oldHook.state : initial,\n    queue: []\n  }\n  // 从旧的钩子队列中获取所有的动作 然后将他们一一应用到新的钩子的状态上\n  const actions = oldHook ? oldHook.queue : []\n  actions.forEach(action => {\n    hook.state = action(hook.state)\n  })\n  // 设置钩子状态\n  const setState = (action) => {\n    hook.queue.push(action)\n    // 更新渲染\n    wipRoot = {\n      dom: currentRoot.dom,\n      props: currentRoot.props,\n      alternate: currentRoot\n    }\n    nextUnitOfWork = wipRoot\n    deletions = []\n    // hook.queue.push(state => state)\n    // scheduleWork(wipFiber)\n  }\n  // 把钩子添加至工作单元\n  wipFiber.hook = hook\n\n  // 返回钩子的状态和设置钩子的函数\n  return [hook.state, setState]\n}\n\nexport { render, useState }\n","import { createElement } from './createElement';\nimport { render, useState } from './render'\n\nconst React = { createElement, render, useState }\n\nexport default React\n\n// window.React = {\n//   createElement,\n//   render,\n//   useState\n// }\n//\n// function App(props) {\n//   const [state, setState] = useState(1)\n//   return <h1 onClick={() => setState(c => ++c)}>Hi {props.name}, Count: { state }</h1>\n// }\n// const element = <App name=\"虚拟宇宙\" />\n// const container = document.getElementById('root')\n// render(element, container);\n\n// const container = document.getElementById('root');\n// const updateValue = (e) => {\n//   rerender(e.target.value);\n// };\n//\n// const rerender = (value) => {\n//   const element = (\n//     <div>\n//       <input onInput={updateValue} value={value} />\n//       <h2>Hello {value}</h2>\n//     </div>\n//   );\n//   render(element, container);\n// };\n//\n// rerender('World');","/**\n * 创建文本节点\n * @param text\n * @returns {{type: string, props: {nodeValue, children: *[]}}}\n */\nfunction createTextElement(text) {\n  return {\n    type: 'TEXT_ELEMENT',\n    props: {\n      nodeValue: text,\n      children: []\n    }\n  }\n}\n\n/**\n * 创建元素\n * @param type\n * @param props\n * @param children\n * @returns {{children: (*|{type: string, props: {nodeValue, children: *[]}})[], type, props: {}}}\n */\nfunction createElement(type, props, ...children) {\n  return {\n    type,\n    props: {\n      ...props,\n      children: children.map((child) =>\n        typeof child === 'object' ? child : createTextElement(child)\n      )\n    },\n  }\n}\n\nexport {\n  createElement,\n  createTextElement\n}\n"],"names":["nextUnitOfWork","wipFiber","wipRoot","currentRoot","deletions","isProperty","key","isNew","prev","next","isEvent","startsWith","updateDom","dom","prevProps","nextProps","Object","keys","filter","forEach","name","eventType","toLowerCase","substring","removeEventListener","addEventListener","commitDeletion","fiber","domParent","removeChild","child","commitWork","domParentFiber","parent","effectTag","appendChild","alternate","props","sibling","type","Function","children","hooks","reconcileChildren","updateFunctionComponent","document","createTextNode","createElement","createDom","updateHostComponent","nextFiber","elements","index","oldFiber","prevSibling","length","element","newFiber","sameType","push","requestIdleCallback","workLoop","deadline","shouldYield","performUnitOfWork","console","log","timeRemaining","React","map","nodeValue","render","container","useState","initial","oldHook","hook","state","queue","action"],"mappings":"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"}